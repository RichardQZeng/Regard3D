cmake_minimum_required(VERSION 3.10)
project(Regard3D CXX)

# Fix for Clang detection, see https://cmake.org/cmake/help/latest/policy/CMP0025.html
cmake_policy(SET CMP0025 NEW)
# Set options for Clang
IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=libc++ -stdlib=libc++ -std=c++11 ${EXTRA_COMPILER_OPTIONS}" )
	message("-std=libc++")
ENDIF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")

# Set options for Clang
IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=libc++ -stdlib=libc++ -std=c++11 ${EXTRA_COMPILER_OPTIONS}" )
	message("-std=libc++")
ENDIF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")

# Enable Unicode
ADD_DEFINITIONS(-D_UNICODE -DUNICODE)

IF(NOT DEFINED ${IS_64BITS})
	SET(IS_64BITS 0)
ENDIF(NOT DEFINED ${IS_64BITS})

IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET(IS_64BITS 1)
ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

# Determine whether 32 or 64 bits
IF(${IS_64BITS} EQUAL 1)
	SET( R3D_CMAKE_ARCHITECTURE "x64" )
	SET( R3D_COMPILER_ARCH "" )
	IF(MINGW)
		SET( CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} -D WX_CPU_AMD64" )
	ENDIF(MINGW)
ELSE(${IS_64BITS} EQUAL 1)
	SET( R3D_CMAKE_ARCHITECTURE "x86")
	SET( R3D_COMPILER_ARCH "/arch:SSE2")
	IF(MINGW)
		SET( CMAKE_RC_FLAGS "${CMAKE_RC_FLAGS} -D WX_CPU_X86" )
	ENDIF(MINGW)
ENDIF(${IS_64BITS} EQUAL 1)

# Retrieve version numbers from version.h
FILE(STRINGS "${CMAKE_SOURCE_DIR}/version.h" REGARD3D_VERSION_MAJOR_LINE REGEX "REGARD3D_VERSION_MAJOR .?")
STRING(FIND ${REGARD3D_VERSION_MAJOR_LINE} " " R3D_VMJL_LAST_SPACE_POS REVERSE)
STRING(SUBSTRING ${REGARD3D_VERSION_MAJOR_LINE} ${R3D_VMJL_LAST_SPACE_POS} -1 REGARD3D_VERSION_MAJOR)
STRING(STRIP ${REGARD3D_VERSION_MAJOR} REGARD3D_VERSION_MAJOR)
FILE(STRINGS "${CMAKE_SOURCE_DIR}/version.h" REGARD3D_VERSION_MINOR_LINE REGEX "REGARD3D_VERSION_MINOR .?")
STRING(FIND ${REGARD3D_VERSION_MINOR_LINE} " " R3D_VMNL_LAST_SPACE_POS REVERSE)
STRING(SUBSTRING ${REGARD3D_VERSION_MINOR_LINE} ${R3D_VMNL_LAST_SPACE_POS} -1 REGARD3D_VERSION_MINOR)
STRING(STRIP ${REGARD3D_VERSION_MINOR} REGARD3D_VERSION_MINOR)
FILE(STRINGS "${CMAKE_SOURCE_DIR}/version.h" REGARD3D_VERSION_BUILD_LINE REGEX "REGARD3D_VERSION_BUILD .?")
STRING(FIND ${REGARD3D_VERSION_BUILD_LINE} " " R3D_VBLL_LAST_SPACE_POS REVERSE)
STRING(SUBSTRING ${REGARD3D_VERSION_BUILD_LINE} ${R3D_VBLL_LAST_SPACE_POS} -1 REGARD3D_VERSION_BUILD)
STRING(STRIP ${REGARD3D_VERSION_BUILD} REGARD3D_VERSION_BUILD)
FILE(STRINGS "${CMAKE_SOURCE_DIR}/version.h" REGARD3D_COPYRIGHT_YEAR_LINE REGEX "REGARD3D_COPYRIGHT_YEAR .?")
STRING(FIND ${REGARD3D_COPYRIGHT_YEAR_LINE} " " R3D_CY_LAST_SPACE_POS REVERSE)
STRING(SUBSTRING ${REGARD3D_COPYRIGHT_YEAR_LINE} ${R3D_CY_LAST_SPACE_POS} -1 REGARD3D_COPYRIGHT_YEAR)
STRING(REPLACE "\"" "" REGARD3D_COPYRIGHT_YEAR ${REGARD3D_COPYRIGHT_YEAR})
STRING(STRIP ${REGARD3D_COPYRIGHT_YEAR} REGARD3D_COPYRIGHT_YEAR)


IF(WIN32)
	SET( R3D_WIN32 1 )
ENDIF(WIN32)
IF(APPLE)
	SET( R3D_MACOSX 1 )
	# Write version numbers into plist (OS X only)
	CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/res/osx/regard3d-Info.plist.in regard3d-Info.plist)
	FILE(COPY ${CMAKE_SOURCE_DIR}/res/osx/regard3d.icns DESTINATION ${CMAKE_BINARY_DIR})
ENDIF(APPLE)
IF(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	SET( R3D_LINUX 1)
ENDIF(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")

# Only temporary: On OS X, we need the Open GL framework
IF(APPLE)
	FIND_LIBRARY(OPENGL_LIBRARY OpenGL )
	MARK_AS_ADVANCED (OPENGL_LIBRARY)
	SET(EXTRA_LIBS ${OPENGL_LIBRARY})
	FIND_PATH(OPENGL_INCLUDE_DIR CGLCurrent.h)
	INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})
#	message("OPENGL_INCLUDE_DIR = ${OPENGL_INCLUDE_DIR}")
ENDIF (APPLE)

# wxWidgets
IF(NOT DEFINED wxWidgets_LIB_DIR AND WIN32)
	IF(CMAKE_COMPILER_IS_GNUCC)
		IF(${IS_64BITS} EQUAL 1)
			SET(wxWidgets_LIB_DIR ${wxWidgets_ROOT_DIR}/lib/gcc_lib64)
		ELSE(${IS_64BITS} EQUAL 1)
			SET(wxWidgets_LIB_DIR ${wxWidgets_ROOT_DIR}/lib/gcc_lib)
		ENDIF(${IS_64BITS} EQUAL 1)
	ELSE(CMAKE_COMPILER_IS_GNUCC)
		IF(${IS_64BITS} EQUAL 1)
			SET(wxWidgets_LIB_DIR ${wxWidgets_ROOT_DIR}/lib/vc_x64_lib)
		ELSE(${IS_64BITS} EQUAL 1)
			SET(wxWidgets_LIB_DIR ${wxWidgets_ROOT_DIR}/lib/vc_lib)
		ENDIF(${IS_64BITS} EQUAL 1)
	ENDIF(CMAKE_COMPILER_IS_GNUCC)
	IF(CMAKE_BUILD_TYPE="Debug")
		SET(wxWidgets_CONFIGURATION mswud)
	ELSE()
		SET(wxWidgets_CONFIGURATION mswu)
	ENDIF()
ENDIF(WIN32)

FIND_PACKAGE(wxWidgets REQUIRED net gl aui adv core base)
INCLUDE(${wxWidgets_USE_FILE})
# Workaround for MSYS
IF(DEFINED R3D_ALT_wxWidgets_INCLUDE_DIRS)
	SET(wxWidgets_INCLUDE_DIRS = "${R3D_ALT_wxWidgets_INCLUDE_DIRS}" )
ENDIF(DEFINED R3D_ALT_wxWidgets_INCLUDE_DIRS)

IF(R3D_REMOVE_ADDITIONAL_LIBRARIES)
	# These are superfluous libraries added by wx-config
	# These libraries are already linked to, but statically (depending on the platform)
	# On OS X, these link parameters lead to a dependency on the shared libraries
	LIST(REMOVE_ITEM wxWidgets_LIBRARIES "-lz")
	LIST(REMOVE_ITEM wxWidgets_LIBRARIES "-lpthread")
	LIST(REMOVE_ITEM wxWidgets_LIBRARIES "-llzma")
	LIST(REMOVE_ITEM wxWidgets_LIBRARIES "-ljbig")
	LIST(REMOVE_ITEM wxWidgets_LIBRARIES "-ljpeg")
	LIST(REMOVE_ITEM wxWidgets_LIBRARIES "-lpng")
	LIST(REMOVE_ITEM wxWidgets_LIBRARIES "-ltiff")
	LIST(REMOVE_ITEM wxWidgets_LIBRARIES "-liconv")
ENDIF(R3D_REMOVE_ADDITIONAL_LIBRARIES)

IF(R3D_CMAKE_DEBUG_OUTPUT)
	message("wxWidgets_INCLUDE_DIRS = ${wxWidgets_INCLUDE_DIRS}")
	message("wxWidgets_LIBRARIES = ${wxWidgets_LIBRARIES}")
ENDIF(R3D_CMAKE_DEBUG_OUTPUT)
INCLUDE_DIRECTORIES(${wxWidgets_INCLUDE_DIRS})

# FLANN (using FindFLANN.cmake from PCL)
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
SET(FLANN_USE_STATIC TRUE)
FIND_PACKAGE(FLANN 1.7.0 REQUIRED)
INCLUDE_DIRECTORIES(${FLANN_INCLUDE_DIRS})

# OpenSceneGraph
FIND_PACKAGE(OpenSceneGraph 3.0.0 REQUIRED osgFX osgPresentation osgVolume
	osgWidget osgViewer osgAnimation osgText osgDB osgGA osgManipulator
	osgTerrain osgParticle osgShadow osgSim osgUtil osg OpenThreads)

INCLUDE_DIRECTORIES(${OPENSCENEGRAPH_INCLUDE_DIRS})
IF(R3D_USE_OSG_STATIC)
	ADD_DEFINITIONS(-DOSG_LIBRARY_STATIC)
ENDIF(R3D_USE_OSG_STATIC)

# OpenGL
FIND_PACKAGE(OpenGL REQUIRED)
INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})

# Eigen
LIST(APPEND CMAKE_MODULE_PATH "${EIGEN3_INCLUDE_DIR}/cmake" )
FIND_PACKAGE(Eigen3 3.0.0 REQUIRED)
MESSAGE("Found Eigen ${EIGEN3_VERSION}")
INCLUDE_DIRECTORIES( ${EIGEN3_INCLUDE_DIR} )
 
#FIND_PACKAGE(MKL)
#IF(MKL_FOUND)
#	INCLUDE_DIRECTORIES(${MKL_INCLUDE_DIRS})
#	LINK_DIRECTORIES(${MKL_LIBRARY_DIRS})
#	ADD_DEFINITIONS(-DEIGEN_USE_MKL_ALL)
#ENDIF(MKL_FOUND)

# boost
SET(Boost_USE_STATIC_LIBS        ON)
SET(Boost_USE_MULTITHREADED      ON)
IF(MSVC)
	SET(Boost_USE_STATIC_RUNTIME     OFF)
ELSE(MSVC)
	IF(MSYS)
		SET(Boost_USE_STATIC_RUNTIME     OFF)
	ELSE(MSYS)
		SET(Boost_USE_STATIC_RUNTIME     ON)
	ENDIF(MSYS)
ENDIF(MSVC)
#SET(Boost_DEBUG TRUE)
FIND_PACKAGE( Boost 1.53.0 REQUIRED date_time timer thread
	system chrono serialization filesystem locale)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
IF(WIN32 AND CMAKE_COMPILER_IS_GNUCC)
	SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DBOOST_THREAD_USE_LIB" )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBOOST_THREAD_USE_LIB" )
ENDIF(WIN32 AND CMAKE_COMPILER_IS_GNUCC)
IF(UNIX AND NOT APPLE)
	# Workaround for apparent bug in FindBoost (librt is not added at the end):
	message("Boost_LIBRARIES = ${Boost_LIBRARIES}")
	SET(Boost_LIBRARIES "${Boost_LIBRARIES};rt")
ENDIF(UNIX AND NOT APPLE)

# OpenCV
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${OpenCV_DIR}")
SET(OpenCV_STATIC ON)
FIND_PACKAGE( OpenCV REQUIRED core flann imgproc features2d calib3d highgui imgcodecs videoio ml )	# ml video legacy objdetect photo gpu videostab ts ocl superres nonfree stitching contrib
# Workaround for OpenCV: Use Release libraries for RelWithDebInfo target
# (found here: http://stackoverflow.com/questions/24262081/cmake-relwithdebinfo-links-to-debug-libs)
SET_TARGET_PROPERTIES(${OpenCV_LIBS} PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)
IF(TARGET libjasper)
	SET_TARGET_PROPERTIES(libjasper PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)
ENDIF(TARGET libjasper)
IF(TARGET IlmImf)
	SET_TARGET_PROPERTIES(IlmImf PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)
ENDIF(TARGET IlmImf)
IF(TARGET libwebp)
	SET_TARGET_PROPERTIES(libwebp PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)
ENDIF(TARGET libwebp)
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})

# On OS X, OpenCV adds dynamic link libraries to the link list, but we want to link statically to them.
# The following code removes these libraries.
foreach(tgt ${OpenCV_LIBRARIES})
	get_property(v TARGET ${tgt} PROPERTY IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE)
#	message("Property of ${tgt}, before: ${v}")
	set(v_new "")
	foreach(v_part ${v})
		if(${v_part} STREQUAL "lzma")
			# Remove this
		elseif(${v_part} STREQUAL "jbig")
			# Remove this
		elseif(${v_part} STREQUAL "z")
			# Remove this
		elseif(${v_part} MATCHES ".*dylib")
		else()
			list(APPEND v_new ${v_part})
		endif()
	endforeach()
	set_target_properties(${tgt} PROPERTIES IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE "${v_new}")
#	get_property(v2 TARGET ${tgt} PROPERTY IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE)
#	message("Property of ${tgt}, after: ${v2}")
endforeach()


# OpenMP
IF(NOT REGARD3D_DISABLE_OPENMP)
	FIND_PACKAGE( OpenMP )
	IF(OPENMP_FOUND)
		SET( R3D_HAVE_OPENMP 1 )	# This will end up in config.h
		SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
		ADD_DEFINITIONS(-DUSE_OPENMP -DOPENMVG_USE_OPENMP)	# Some OpenMVG subroutines require this
	ENDIF(OPENMP_FOUND)
ELSE(NOT REGARD3D_DISABLE_OPENMP)
	SET(OpenMVG_USE_OPENMP OFF)
ENDIF(NOT REGARD3D_DISABLE_OPENMP)

# BLAS, LAPACK
IF(R3D_USE_BLAS)
	IF(MINGW)
		SET(CMAKE_REQUIRED_LIBRARIES "gfortran")
	ENDIF(MINGW)
	# Remark: Use the FindBLAS/FindLAPACK from Eigen, the CMake-originals are very difficult to make happy
	FIND_PACKAGE(BLAS)
	IF (BLAS_FOUND)
		MESSAGE("-- Found BLAS library: ${BLAS_LIBRARIES}")
		IF(MINGW)
			# This is a hack to add "-static -lgfortran" at the very end of the link line
			ADD_LIBRARY(blas STATIC IMPORTED)
			SET_TARGET_PROPERTIES(blas PROPERTIES
				INTERFACE_LINK_LIBRARIES "-static -lgfortran -static -lquadmath"
				IMPORTED_LOCATION "${BLAS_LIBRARIES}")
		ENDIF(MINGW)
		INCLUDE_DIRECTORIES(${BLAS_INCLUDE_DIR})
		ADD_DEFINITIONS(-DEIGEN_USE_LAPACKE)
		IF(MSVC)
			ADD_DEFINITIONS(-Dlapack_complex_float=std::complex<float> -Dlapack_complex_double=std::complex<double>)
		ENDIF(MSVC)
	ELSE (BLAS_FOUND)
		MESSAGE("-- Did not find BLAS library.")
	ENDIF (BLAS_FOUND)
	FIND_PACKAGE(LAPACK QUIET REQUIRED)
	IF (LAPACK_FOUND)
		MESSAGE("-- Found LAPACK library: ${LAPACK_LIBRARIES}")
	ELSE (LAPACK_FOUND)
		MESSAGE("-- Did not find LAPACK library.")
	ENDIF (LAPACK_FOUND)

	LIST(GET BLAS_LIBRARIES 0 BLAS_LIBS_FIRST_ENTRY)
	GET_FILENAME_COMPONENT(BLAS_LIBS_PATH ${BLAS_LIBS_FIRST_ENTRY} DIRECTORY)

	# Check whether OpenBLASConfig.cmake is present
	IF(NOT BLAS_LIBS_PATH EQUAL "")
		INCLUDE("${BLAS_LIBS_PATH}/cmake/openblas/OpenBLASConfig.cmake" OPTIONAL)
		# This will define OpenBLAS_VERSION, which will be written to config.h
		IF(DEFINED OpenBLAS_VERSION)
			SET(R3D_HAVE_OpenBLAS_VERSION TRUE)
		ENDIF(DEFINED OpenBLAS_VERSION)
	ENDIF(NOT BLAS_LIBS_PATH EQUAL "")

ENDIF(R3D_USE_BLAS)
IF(R3D_USE_OPENBLAS)
	FIND_PACKAGE(OpenBLAS REQUIRED)
	ADD_DEFINITIONS(-DEIGEN_USE_LAPACKE)
	IF(MSVC)
		ADD_DEFINITIONS(-Dlapack_complex_float=std::complex<float> -Dlapack_complex_double=std::complex<double>)
	ENDIF(MSVC)
	IF(DEFINED OpenBLAS_VERSION)
		SET(R3D_HAVE_OpenBLAS_VERSION TRUE)
	ENDIF(DEFINED OpenBLAS_VERSION)
ENDIF(R3D_USE_OPENBLAS)

# Ceres
MESSAGE("-- Check for Ceres")
IF(NOT DEFINED EIGEN_INCLUDE_DIR OR EIGEN_INCLUDE_DIR STREQUAL "")
	SET(EIGEN_INCLUDE_DIR ${EIGEN3_INCLUDE_DIR})
ENDIF(NOT DEFINED EIGEN_INCLUDE_DIR OR EIGEN_INCLUDE_DIR STREQUAL "")
IF(NOT DEFINED EIGEN_INCLUDE_DIR_HINTS OR EIGEN_INCLUDE_DIR_HINTS STREQUAL "")
	SET(EIGEN_INCLUDE_DIR_HINTS ${EIGEN3_INCLUDE_DIR})
ENDIF(NOT DEFINED EIGEN_INCLUDE_DIR_HINTS OR EIGEN_INCLUDE_DIR_HINTS STREQUAL "")
SET( CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CERES_DIR}/cmake;${CERES_DIR}/share/Ceres" )
SET( CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH};${CERES_DIR}/cmake;${CERES_DIR}/share/Ceres" )
FIND_PACKAGE(Ceres REQUIRED)
IF (CERES_FOUND)
	MESSAGE("-- Found Ceres: ${CERES_INCLUDE_DIRS}")
ELSE (CERES_FOUND)
	MESSAGE(FATAL_ERROR "Can't find Ceres. Please set CERES_INCLUDE_DIR & "
		"CERES_LIBRARIES")
ENDIF (CERES_FOUND)
SET_TARGET_PROPERTIES(${CERES_LIBRARIES} PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)

# Remove non-GPL parts of SuiteSparse
foreach(tgt ${CERES_LIBRARIES})
	get_property(v TARGET ${tgt} PROPERTY IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE)
	message("Property of ${tgt}, before: ${v}")
	set(v_new "")
	foreach(v_part ${v})
		if(${v_part} MATCHES ".*spqr.*")
			# Remove this
		else()
			list(APPEND v_new ${v_part})
		endif()
	endforeach()
	set_target_properties(${tgt} PROPERTIES IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE "${v_new}")
	get_property(v2 TARGET ${tgt} PROPERTY IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE)
	message("Property of ${tgt}, after: ${v2}")
endforeach()


IF(NOT DEFINED GLOG_INCLUDE_DIRS OR GLOG_INCLUDE_DIRS EQUAL "")
	SET(GLOG_INCLUDE_DIRS ${CERES_INCLUDE_DIR}/ceres/internal/miniglog)
ENDIF(NOT DEFINED GLOG_INCLUDE_DIRS OR GLOG_INCLUDE_DIRS EQUAL "")
INCLUDE_DIRECTORIES(
	include
	src
	${CERES_INCLUDE_DIR}
	${GFLAGS_INCLUDE_DIRS}
	${GLOG_INCLUDE_DIRS}
	${EIGEN_INCLUDE_DIRS})

# SuiteSparse
IF(MSVC)
	LIST(APPEND CMAKE_MODULE_PATH "${SUITESPARSE_DIR};${SUITESPARSE_DIR}/cmake" )
	# Hack: Remove src/cmake from CMAKE_MODULE_PATH in order to use the one provided by the suitesparse-metis-for-windows project
	LIST(REMOVE_ITEM CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
ENDIF(MSVC)
FIND_PACKAGE(SuiteSparse REQUIRED)
IF(MSVC)
	# Add src/cmake again
	LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

	# Use the SuiteSparseConfig.cmake file provided by the suitesparse-metis-for-windows project
#	INCLUDE(${USE_SuiteSparse})
#	INCLUDE_DIRECTORIES(${SuiteSparse_INCLUDE_DIR})
	IF(SuiteSparse_FOUND)
		MESSAGE("-- Found SuiteSparse: ${SUITESPARSE_INCLUDE_DIRS} ${SuiteSparse_INCLUDE_DIR}")
	ELSE(SuiteSparse_FOUND)
		MESSAGE(FATAL_ERROR "Can't find SuiteSparse. Please set SUITESPARSE_DIR")
	ENDIF(SuiteSparse_FOUND)
	
	# Use only non-GPL parts
	SET(SuiteSparse_LIBRARIES_NGPL "")
	#message("SuiteSparse_LIBRARIES = ${SuiteSparse_LIBRARIES}")
	FOREACH(sslib ${SuiteSparse_LIBRARIES})
		IF(${sslib} MATCHES ".*spqr.*")
			# Remove this
		ELSEIF(${sslib} MATCHES ".*umfpack.*")
			# Remove this
		ELSEIF(${sslib} MATCHES ".*klu.*")
			# Remove this
		ELSEIF(${sslib} MATCHES ".*btf.*")
			# Remove this
		ELSEIF(${sslib} MATCHES ".*cxsparse.*")
			# Remove this
		ELSEIF(${sslib} MATCHES ".*ldl.*")
			# Remove this
		ELSE()
			list(APPEND SuiteSparse_LIBRARIES_NGPL ${sslib})
		ENDIF()
	endforeach()
	SET(SuiteSparse_LIBRARIES ${SuiteSparse_LIBRARIES_NGPL})
	#message("SuiteSparse_LIBRARIES = ${SuiteSparse_LIBRARIES}")
	
ELSE(MSVC)
	# Use FindSuiteSparse.cmake in src/cmake directory (originally from ceres)
	INCLUDE_DIRECTORIES(${SUITESPARSE_INCLUDE_DIRS})

	# Use only non-GPL parts
	SET(SuiteSparse_LIBRARIES "${CHOLMOD_LIBRARY};${CCOLAMD_LIBRARY};${CAMD_LIBRARY};${COLAMD_LIBRARY};${AMD_LIBRARY};${SUITESPARSE_CONFIG_LIBRARY}")
	IF(METIS_FOUND)
		LIST(APPEND SuiteSparse_LIBRARIES "${METIS_LIBRARY}")
	ENDIF(METIS_FOUND)
	#SET(SuiteSparse_LIBRARIES "")
ENDIF(MSVC)

IF(MSVC)
# Glog
FIND_PACKAGE(Glog REQUIRED)
SET_TARGET_PROPERTIES(${GLOG_LIBRARIES} PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)
message("GLOG_INCLUDE_DIRS = ${GLOG_INCLUDE_DIRS}")
message("GLOG_LIBRARIES = ${GLOG_LIBRARIES}")
ENDIF(MSVC)

# AssImp
IF(WIN32 OR APPLE)
	LIST(APPEND CMAKE_MODULE_PATH "${ASSIMP_DIR}/lib/cmake/assimp-4.0" )
	LIST(APPEND CMAKE_PREFIX_PATH "${ASSIMP_DIR}/lib/cmake/assimp-4.0" )
	FIND_PACKAGE(assimp REQUIRED)
	IF(WIN32)
		IF(MSVC)
			SET(ASSIMP_LIBRARIES "optimized;assimp-vc140-mt.lib;debug;assimp-vc140-mtd.lib")	# Overwriting defaults
		ELSE(MSVC)
			SET(ASSIMP_LIBRARIES "optimized;assimp.lib;debug;assimpd.lib")	# Overwriting defaults
		ENDIF(MSVC)
	ENDIF(WIN32)
ELSE(WIN32 OR APPLE)
	pkg_check_modules(ASSIMP REQUIRED assimp)
ENDIF(WIN32 OR APPLE)
INCLUDE_DIRECTORIES(${ASSIMP_INCLUDE_DIRS})
LINK_DIRECTORIES(${ASSIMP_LIBRARY_DIRS})
message("AssiMP: ${ASSIMP_LIBRARIES} ${ASSIMP_INCLUDE_DIRS}  ${ASSIMP_LIBRARY_DIRS}")

# ThreadingBuildingBlocks (optional)
IF(R3D_USE_TBB)
	IF(MSVC)
		SET(ENV{LIBRARY_PATH} "$ENV{LIBRARY_PATH};$ENV{R3D_TBB_LIBRARY_PATH}" )
	ENDIF(MSVC)
	SET(TBB_LIBRARIES "")
	FIND_PACKAGE(TBB)
	IF(TBB_FOUND)

		IF(R3D_LINUX)
			# On Linux, FindTBB also adds tbbmalloc. We don't want that, we only want tbbmalloc_proxy
			SET(TBB_LIBS_NEW "")
			foreach(tbblib ${TBB_LIBRARIES})
				IF(${tbblib} MATCHES ".*tbbmalloc.*")
				ELSE()
					LIST(APPEND TBB_LIBS_NEW ${tbblib})
				ENDIF()
			endforeach()
			LIST(REMOVE_DUPLICATES TBB_LIBS_NEW)
			SET(TBB_LIBRARIES ${TBB_LIBS_NEW})
		ENDIF(R3D_LINUX)
		IF(R3D_MACOSX)
			# Remove tbbmalloc and TBB framework
			SET(TBB_LIBS_NEW "")
			foreach(tbblib ${TBB_LIBRARIES})
				IF(${tbblib} MATCHES ".*tbbmalloc.*")
				ELSEIF(${tbblib} MATCHES ".*framework.*")
				ELSE()
					LIST(APPEND TBB_LIBS_NEW ${tbblib})
				ENDIF()
			endforeach()
			LIST(REMOVE_DUPLICATES TBB_LIBS_NEW)
			SET(TBB_LIBRARIES ${TBB_LIBS_NEW})
		ENDIF(R3D_MACOSX)
		message("ThreadingBuildingBlocks found: ${TBB_INTERFACE_VERSION} ${TBB_LIBRARIES}")
		INCLUDE_DIRECTORIES(${TBB_INCLUDE_DIRS})
		LINK_DIRECTORIES(${TBB_LIBRARY_DIRS};${TBB_DEBUG_LIBRARY_DIRS})
		SET(R3D_HAVE_TBB TRUE)	# See config.h.in
		SET(R3D_USE_TBB_THREADING FALSE)
		IF(NOT R3D_HAVE_OPENMP)
			SET(R3D_USE_TBB_THREADING TRUE)
		ENDIF(NOT R3D_HAVE_OPENMP)
	ENDIF(TBB_FOUND)
ENDIF(R3D_USE_TBB)

# OpenMVG
SET(OPENMVG_EXCLUDE_PATENTED ON)
#ADD_SUBDIRECTORY(${OPENMVG_SRC_DIR} OpenMVG EXCLUDE_FROM_ALL)
#INCLUDE_DIRECTORIES(${OpenMVG_INCLUDE_DIRS})

FIND_PACKAGE(OpenMVG REQUIRED)
#get_property(OPENMVG_INCLUDE_DIRS TARGET OpenMVG::OpenMVG_sfm PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
#message("OPENMVG_LIBRARIES: ${OPENMVG_LIBRARIES}")
#message("OPENMVG_INCLUDE_DIRS: ${OPENMVG_INCLUDE_DIRS}")
#foreach(CURDIR ${OPENMVG_INCLUDE_DIRS})
#	IF(IS_DIRECTORY "${CURDIR}/third_party")
#		LIST(APPEND OPENMVG_INCLUDE_DIRS "${CURDIR}/third_party")
#	ENDIF()
#endforeach()
#message("OPENMVG_INCLUDE_DIRS: ${OPENMVG_INCLUDE_DIRS}")
#INCLUDE_DIRECTORIES(${OPENMVG_INCLUDE_DIRS})
# The above doesn't work, this is an ugly workaround:
INCLUDE_DIRECTORIES("${wxWidgets_ROOT_DIR}/include/openMVG_dependencies")
INCLUDE_DIRECTORIES("${wxWidgets_ROOT_DIR}/include/openMVG_dependencies/cereal/include")

#SET_TARGET_PROPERTIES(${OPENMVG_LIBRARIES} PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)

IF(DEFINED OPENMVG_VERSION)
	SET(R3D_HAVE_OPENMVG_VERSION TRUE)
ENDIF(DEFINED OPENMVG_VERSION)
IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
	ADD_DEFINITIONS(-DOPENMVG_STD_UNORDERED_MAP)
ENDIF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")

# VLFEAT (optional)
SET( CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" )
FIND_PACKAGE(VLFEAT)
IF(VLFEAT_FOUND)
	message("VLFEAT found, adding define for R3D_HAVE_VLFEAT")
	INCLUDE_DIRECTORIES(${VLFEAT_INCLUDE_DIR})
	#ADD_DEFINITIONS(-DR3D_HAVE_VLFEAT)		Moved to config.h.in
	SET(R3D_HAVE_VLFEAT TRUE)
ENDIF(VLFEAT_FOUND)

# NLOPT (optional)
IF(DEFINED NLOPT_ROOT_DIR)
	INCLUDE_DIRECTORIES(${NLOPT_ROOT_DIR}/include)
	IF(WIN32)
	SET(NLOPT_LIBRARIES "${NLOPT_ROOT_DIR}/lib/nlopt.lib")
	ELSE(WIN32)
		SET(NLOPT_LIBRARIES "${NLOPT_ROOT_DIR}/lib/libnlopt.a")
	ENDIF(WIN32)
	SET(R3D_HAVE_NLOPT TRUE)	# See config.h.in
ENDIF(DEFINED NLOPT_ROOT_DIR)

CONFIGURE_FILE(config.h.in config.h)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_BINARY_DIR})

# Set options for Intel
IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")

	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )

	SET( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MD /Ox /fp:fast=2 /Qansi-alias /Qalias-args- /Qalias-const- /Qinline-max-size- ${R3D_COMPILER_ARCH} /Qprec-div- /Qprec-sqrt- ${INTEL_COMPILER_EXTRA_OPTIONS}" )
	message("CMAKE_C_FLAGS_RELEASE: ${CMAKE_C_FLAGS_RELEASE}")
	SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /Ox /fp:fast=2 /Qansi-alias /Qalias-args- /Qalias-const- /Qinline-max-size- ${R3D_COMPILER_ARCH} /Qprec-div- /Qprec-sqrt- ${INTEL_COMPILER_EXTRA_OPTIONS}" )
	message("CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}")

	# Switch off boost auto-linking feature
	ADD_DEFINITIONS(-DBOOST_ALL_NO_LIB)

	# Do not link the Intel math library libmmd.dll, but instead use the default Microsoft CRT
#	SET( CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} svml_dispmt.lib libmmt.lib /NODEFAULTLIB:libmmd.lib /INCREMENTAL:NO" )
	IF(WIN32)
		SET( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /INCREMENTAL:NO /NODEFAULTLIB:libcmt.lib /NODEFAULTLIB:libcpmt.lib" )
		message("CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}")
	ENDIF(WIN32)
ENDIF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")

# Set options for Clang
IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=libc++ -stdlib=libc++ -std=c++11 ${EXTRA_COMPILER_OPTIONS}" )
	message("-std=libc++")
ENDIF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")

IF(MSVC)
	SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${R3D_COMPILER_ARCH} /bigobj /MP" )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${R3D_COMPILER_ARCH} /bigobj /MP" )
	SET( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Ox /Ob2 /Oi /Ot /GL /GS- ${R3D_COMPILER_ARCH} /fp:fast /MP" )
	SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ox /Ob2 /Oi /Ot /GL /GS- ${R3D_COMPILER_ARCH} /fp:fast /MP" )

	SET( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /INCREMENTAL:NO /NODEFAULTLIB:libcmt.lib /LTCG" )
	SET( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:libcmt.lib" )

	# Enable Large address aware in 32 bit builds
	IF(${IS_64BITS} EQUAL 0 AND WIN32)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE")
	ENDIF(${IS_64BITS} EQUAL 0 AND WIN32)
ENDIF(MSVC)

IF(CMAKE_COMPILER_IS_GNUCC)
	SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2 -mfpmath=sse ${EXTRA_COMPILER_OPTIONS}" )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11 -msse2 -mfpmath=sse -fpermissive ${EXTRA_COMPILER_OPTIONS}" )
	SET( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -msse2 -mfpmath=sse -ffast-math ${EXTRA_COMPILER_OPTIONS}" )
	SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=gnu++11 -msse2 -mfpmath=sse -fpermissive -ffast-math ${EXTRA_COMPILER_OPTIONS}" )

	IF(WIN32)
		# Some object files are too big for MinGW if not compiled with -Og (assembler says "too many sections")
		SET( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -Og" )
		SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Og" )
	ENDIF(WIN32)

	IF(R3D_USE_STATIC_LIBGCC)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
	ENDIF(R3D_USE_STATIC_LIBGCC)
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -msse2 ${EXTRA_COMPILER_OPTIONS}")

	# Enable Large address aware in 32 bit builds
	IF(${IS_64BITS} EQUAL 0 AND WIN32)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--large-address-aware")
	ENDIF(${IS_64BITS} EQUAL 0 AND WIN32)
	IF(WIN32)
		# Add some security flags: Enable ASLR and DEP
		SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -Wl,--dynamicbase -Wl,--nxcompat")
	ENDIF(WIN32)

	# Strip everything in Release builds
	IF(NOT APPLE)
		SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -Wl,--strip-all")
	ENDIF(NOT APPLE)
ENDIF(CMAKE_COMPILER_IS_GNUCC)


SET(ALL_SRC ${ALL_SRC} Regard3DApp.cpp Regard3DMainFrame.cpp Regard3DMainFrameBase.cpp
	Regard3DDropTarget.cpp R3DComputeMatches.cpp Regard3DFeatures.cpp R3DProject.cpp
	Regard3DModelViewHelper.cpp R3DDensificationProcess.cpp R3DSurfaceGenProcess.cpp
	R3DModelOperations.cpp )

SET(ALL_HEADERS ${ALL_HEADERS} Regard3DApp.h Regard3DMainFrame.h Regard3DMainFrameBase.h
	CommonIncludes.h Regard3DDropTarget.h R3DComputeMatches.h Regard3DFeatures.h R3DProject.h
	Regard3DModelViewHelper.h R3DDensificationProcess.h R3DSurfaceGenProcess.h
	R3DModelOperations.h )

IF(R3D_GETENV_WORKAROUND)
	SET(ALL_SRC ${ALL_SRC} getenv_mingw_workaround.c)
ENDIF(R3D_GETENV_WORKAROUND)

IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
	SET_PROPERTY(SOURCE R3DComputeMatches.cpp APPEND_STRING PROPERTY COMPILE_FLAGS " -std=c++11 ")
ENDIF(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")

# Daisy
#ADD_SUBDIRECTORY(thirdparty/daisy)
#INCLUDE_DIRECTORIES(thirdparty/daisy/include)

# AKAZE
ADD_SUBDIRECTORY(thirdparty/akaze)
INCLUDE_DIRECTORIES(thirdparty/akaze/lib)

# Fast-AKAZE
ADD_SUBDIRECTORY(thirdparty/fast-akaze)
INCLUDE_DIRECTORIES(thirdparty/fast-akaze)

# LIOP
ADD_SUBDIRECTORY(thirdparty/liop)
INCLUDE_DIRECTORIES(thirdparty/liop)

# LIOP
ADD_SUBDIRECTORY(thirdparty/tinyply)
INCLUDE_DIRECTORIES(thirdparty/tinyply)

# sqlite
ADD_SUBDIRECTORY(thirdparty/sqlite)
INCLUDE_DIRECTORIES(thirdparty/sqlite)

# kgraph
ADD_SUBDIRECTORY(thirdparty/kgraph)
INCLUDE_DIRECTORIES(thirdparty/kgraph)

# EFANNA
INCLUDE_DIRECTORIES(thirdparty/efanna)

# MRPT
INCLUDE_DIRECTORIES(thirdparty/mrpt)

# MRPT
INCLUDE_DIRECTORIES(thirdparty/hnswlib/hnswlib)

# CPUID
ADD_SUBDIRECTORY(thirdparty/cpuid)
INCLUDE_DIRECTORIES(thirdparty/cpuid/cpuid)

# OpenMVG (some include files which do not get installed)
INCLUDE_DIRECTORIES(thirdparty/OpenMVG)

## Organize source files in folders

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

# GL
ADD_SUBDIRECTORY(gl)
INCLUDE_DIRECTORIES(gl)
SET(ALL_SRC ${ALL_SRC} ${GL_SRC})
SET(ALL_HEADERS ${ALL_HEADERS} ${GL_HEADERS})
SOURCE_GROUP("GL" FILES ${GL_SRC} ${GL_HEADERS})

# GUI
ADD_SUBDIRECTORY(gui)
INCLUDE_DIRECTORIES(gui)
SET(ALL_SRC ${ALL_SRC} ${GUI_SRC})
SET(ALL_HEADERS ${ALL_HEADERS} ${GUI_HEADERS})
SOURCE_GROUP("GUI" FILES ${GUI_SRC} ${GUI_HEADERS})

# Threads
ADD_SUBDIRECTORY(threads)
INCLUDE_DIRECTORIES(threads)
SET(ALL_SRC ${ALL_SRC} ${THREADS_SRC})
SET(ALL_HEADERS ${ALL_HEADERS} ${THREADS_HEADERS})
SOURCE_GROUP("Threads" FILES ${THREADS_SRC} ${THREADS_HEADERS})

# Utils
ADD_SUBDIRECTORY(utils)
INCLUDE_DIRECTORIES(utils)
SET(ALL_SRC ${ALL_SRC} ${UTILS_SRC})
SET(ALL_HEADERS ${ALL_HEADERS} ${UTILS_HEADERS})
SOURCE_GROUP("Utils" FILES ${UTILS_SRC} ${UTILS_HEADERS})

IF(MSVC)
	SET_PROPERTY(SOURCE utils/OpenMVGHelper.cpp APPEND_STRING PROPERTY COMPILE_FLAGS " /bigobj ")
ENDIF(MSVC)

IF(WIN32)
	# Add resource definitions for Windows
	SET(ALL_SRC ${ALL_SRC} res/win/regard3d.rc)
ENDIF(WIN32)

# For Apple set the icns file containing icons
IF(APPLE)
	# icon files to copy in the bundle
	SET( OSX_ICON_FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/osx/regard3d.icns )
	# set where in the bundle to put the icns files
	SET_SOURCE_FILES_PROPERTIES( ${OSX_ICON_FILES} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
	# include the icns files in the target
	SET( ALL_SRC ${ALL_SRC} ${OSX_ICON_FILES} )
ENDIF(APPLE)

# For debugging the CMake targets
#INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/EchoTargetProperties.cmake)
#echo_targets(${OpenCV_LIBRARIES})
#echo_targets(IlmImf)

SET(REGARD3D_LINK_LIBRARIES ${wxWidgets_LIBRARIES})

IF(DEFINED OSG_PLUGINS)
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} ${OSG_PLUGINS})
ENDIF(DEFINED OSG_PLUGINS)
IF(DEFINED OSG_PLUGINS_DIR)
	LINK_DIRECTORIES(${OSG_PLUGINS_DIR})
ENDIF(DEFINED OSG_PLUGINS_DIR)

SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} ${OPENSCENEGRAPH_LIBRARIES}
	${Boost_LIBRARIES} AKAZE fast-akaze liop kgraph sqlite ${OpenCV_LIBRARIES}
	OpenMVG::openMVG_sfm OpenMVG::openMVG_stlplus OpenMVG::openMVG_fast OpenMVG::minilog
	OpenMVG::openMVG_exif OpenMVG::openMVG_features OpenMVG::openMVG_image
	OpenMVG::openMVG_linearProgramming OpenMVG::openMVG_lInftyComputerVision
	OpenMVG::openMVG_geometry OpenMVG::openMVG_matching OpenMVG::openMVG_kvld
	OpenMVG::openMVG_matching_image_collection OpenMVG::openMVG_multiview
	OpenMVG::openMVG_numeric OpenMVG::openMVG_robust_estimation
	OpenMVG::openMVG_system 
	${CERES_LIBRARIES} ${GLOG_LIBRARIES} ${SuiteSparse_LIBRARIES} ${FLANN_LIBRARIES}
	${ASSIMP_LIBRARIES} ${OPENGL_LIBRARIES}
	optimized;minilog;debug;minilog_d tinyply cpuid
)
IF(R3D_USE_BLAS)
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES})
ENDIF(R3D_USE_BLAS)
IF(R3D_USE_OPENBLAS)
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} OpenBLAS::OpenBLAS)
ENDIF(R3D_USE_OPENBLAS)
	
IF(MKL_FOUND)
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} ${MKL_LIBRARIES} )
ENDIF(MKL_FOUND)

IF(MINGW)
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} blas)
ENDIF(MINGW)

IF(VLFEAT_FOUND)
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} ${VLFEAT_LIBRARIES})
ENDIF(VLFEAT_FOUND)

IF(R3D_HAVE_NLOPT)
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} ${NLOPT_LIBRARIES})
ENDIF(R3D_HAVE_NLOPT)

IF(R3D_HAVE_TBB)
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} ${TBB_LIBRARIES})
	IF(R3D_LINUX)
		#SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} tbbmalloc_proxy)
	ENDIF(R3D_LINUX)
ENDIF(R3D_HAVE_TBB)

IF(DEFINED R3D_ADDITIONAL_LINK_LIBRARIES)
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} ${R3D_ADDITIONAL_LINK_LIBRARIES})
ENDIF(DEFINED R3D_ADDITIONAL_LINK_LIBRARIES)

IF(APPLE)
	# Add frameworks CoreText QuickLook ApplicationServices CoreServices
	FIND_LIBRARY(CORE_TEXT_LIBRARY CoreText )
	FIND_LIBRARY(QUICK_LOOK_LIBRARY QuickLook )
	FIND_LIBRARY(APP_SERVICES_LIBRARY ApplicationServices )
	FIND_LIBRARY(CORE_SERVICES_LIBRARY CoreServices )
	SET(REGARD3D_LINK_LIBRARIES ${REGARD3D_LINK_LIBRARIES} ${CORE_TEXT_LIBRARY} ${QUICK_LOOK_LIBRARY} ${APP_SERVICES_LIBRARY} ${CORE_SERVICES_LIBRARY})
ENDIF(APPLE)

# Workaround for MSYS: Replace /c/path with c:/path
# MinGW doesn't like the /c/path syntax in linklibs.rsp
IF(MSYS)
	STRING(REGEX REPLACE "/(.)/" "\\1:/" REGARD3D_LINK_LIBRARIES "${REGARD3D_LINK_LIBRARIES}" )
ENDIF(MSYS)

ADD_EXECUTABLE(Regard3D WIN32 MACOSX_BUNDLE ${ALL_SRC} ${ALL_HEADERS})

TARGET_LINK_LIBRARIES(Regard3D ${REGARD3D_LINK_LIBRARIES})

IF(APPLE)
	# configure CMake to use a custom Info.plist
	SET_TARGET_PROPERTIES( Regard3D PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_BINARY_DIR}/regard3d-Info.plist )

	# Copy required third-party executables and resource files
	# Remark: The FILE COPY command is executed when CMake is run, not during the build
	FILE(COPY "${CMAKE_BINARY_DIR}/../DejaVuSans.ttf" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/Resources")
	FILE(COPY "${CMAKE_BINARY_DIR}/../sensor_database.csv" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/Resources")
	
	IF(OPENMP_FOUND)

		IF(CMAKE_COMPILER_IS_GNUCC)
			FILE(COPY "${CMAKE_BINARY_DIR}/../thirdparty_gccmp/pmvs" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")
			FILE(COPY "${CMAKE_BINARY_DIR}/../thirdparty_gccmp/poisson" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")
			FILE(COPY "${CMAKE_BINARY_DIR}/../thirdparty_gccmp/mve" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")

			# Copy libgomp.1.dylib to executable directory
			FIND_FILE(gomp_dylib libgomp.1.dylib PATHS ENV DYLD_LIBRARY_PATH "/opt/local/lib/libgcc")
			FILE(COPY ${gomp_dylib} DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")

			# Set search path of libgomp.1.dylib to the executable path on OS X
			ADD_CUSTOM_COMMAND(TARGET Regard3D POST_BUILD
				COMMAND install_name_tool -change libgomp.1.dylib @executable_path/libgomp.1.dylib "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS/Regard3D" )
		ELSE(CMAKE_COMPILER_IS_GNUCC)
			FILE(COPY "${CMAKE_BINARY_DIR}/../thirdparty_omp/pmvs" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")
			FILE(COPY "${CMAKE_BINARY_DIR}/../thirdparty_omp/poisson" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")
			FILE(COPY "${CMAKE_BINARY_DIR}/../thirdparty_omp/mve" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")

			# Copy libomp.dylib to executable directory
			FIND_FILE(omp_dylib libomp.dylib PATHS ENV DYLD_LIBRARY_PATH "/Users/romanhiestand/dev/clang_openmp/clang+llvm-3.9.0-x86_64-apple-darwin/lib")
			FILE(COPY ${omp_dylib} DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")

			# Set search path of libomp.dylib to the executable path on OS X
			ADD_CUSTOM_COMMAND(TARGET Regard3D POST_BUILD
				COMMAND install_name_tool -change libomp.dylib @executable_path/libomp.dylib "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS/Regard3D" )
		ENDIF(CMAKE_COMPILER_IS_GNUCC)

	ELSE(OPENMP_FOUND)
		FILE(COPY "${CMAKE_BINARY_DIR}/../thirdparty/pmvs" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")
		FILE(COPY "${CMAKE_BINARY_DIR}/../thirdparty/poisson" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")
		FILE(COPY "${CMAKE_BINARY_DIR}/../thirdparty/mve" DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")
	ENDIF(OPENMP_FOUND)

	IF(R3D_HAVE_TBB)
		# Set search path of libtbb.dylib to the executable path on OS X
		ADD_CUSTOM_COMMAND(TARGET Regard3D POST_BUILD
			COMMAND install_name_tool -change libtbb.dylib @executable_path/libtbb.dylib "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS/Regard3D" )

		# Copy libtbb.dylib to executable directory
		FIND_FILE(tbb_dylib libtbb.dylib PATHS ${TBB_LIBRARY_DIRS} ENV DYLD_LIBRARY_PATH)
		FILE(COPY ${tbb_dylib} DESTINATION "${CMAKE_BINARY_DIR}/Regard3D.app/Contents/MacOS")
	ENDIF(R3D_HAVE_TBB)
ENDIF(APPLE)


# Installer definitions (currently only used for Mac OS X)
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Regard 3D")
SET(CPACK_PACKAGE_VENDOR "Roman Hiestand")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/licenses/Copyright.txt")
SET(CPACK_PACKAGE_VERSION_MAJOR ${REGARD3D_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${REGARD3D_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${REGARD3D_VERSION_BUILD})
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "Regard3D")
IF(OPENMP_FOUND)
	SET(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-OpenMP-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
ELSE(OPENMP_FOUND)
	SET(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
ENDIF(OPENMP_FOUND)
IF(APPLE)
	SET(CPACK_GENERATOR "DragNDrop")
	SET(CPACK_OSX_PACKAGE_VERSION "10.6")
ENDIF(APPLE)
IF(UNIX)
	SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>=2.7-18)")
	SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
ENDIF(UNIX)

INSTALL(TARGETS Regard3D DESTINATION ".")
INCLUDE(CPack)
